// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Hackathon {
  id        String     @id @default(uuid())
  slug      String     @unique
  name      String
  attendees Attendee[]

  attendeeAttributes AttendeeAttribute[]

  // event info
  location   String
  startDate  DateTime?
  endDate    DateTime?
  timezone   String?
  schedule   Schedule?
  signupForm SignupForm?
  pages      CustomPage[]
  sponsors   Sponsor[]
  leads      Lead[]
  brandingItems BrandingItem[]

  // branding
  website   String?
  logoUrl   String?
  bannerUrl String?

  // features
  registerEnabled  Boolean @default(false)
  checkInEnabled   Boolean @default(false)
  broadcastEnabled Boolean @default(false)
  scheduleEnabled  Boolean @default(false)
  shipEnabled      Boolean @default(false)
  integrateEnabled Boolean @default(false)
  financeEnabled   Boolean @default(false)
  sponsorsEnabled  Boolean @default(false)
  leadsEnabled     Boolean @default(false)
  brandingEnabled  Boolean @default(false)

  hcbId String?

  customDomain String? @unique

  ownerId         String
  collaboratorIds String[]

  devices                 Device[]
  projects                Project[]
  projectAttributes       ProjectAttribute[]
  projectSubmissionFields ProjectSubmissionField[]
  broadcasts Broadcast[]
}

model CustomPage {
  id          String           @id @default(uuid())
  body        String
  slug        String
  title       String
  cards       CustomPageCard[]
  links       CustomPageLink[]
  hackathonId String           
  hackathon   Hackathon        @relation(fields: [hackathonId], references: [id])
}

model CustomPageCard {
  id           String           @id @default(uuid())
  text         String
  links        CustomPageLink[]
  header       String
  customPage   CustomPage?      @relation(fields: [customPageId], references: [id])
  customPageId String?
}

model CustomPageLink {
  id           String          @id @default(uuid())
  text         String
  url          String
  cardId       String?
  card         CustomPageCard? @relation(fields: [cardId], references: [id])
  customPageId String?
  customPage   CustomPage?     @relation(fields: [customPageId], references: [id])
}

model Schedule {
  id          String    @id @default(uuid())
  hackathonId String    @unique
  tracks      Track[]
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model Sponsor {
  id          String  @id @default(uuid())
  hackathonId String
  name        String
  logoUrl     String?
  website     String?

  showOnWebsite Boolean @default(false)

  // Private information
  contactName  String?
  contactEmail String?
  contactPhone String?

  amountCash  Float?
  amountOther String?

  hackathon Hackathon @relation(fields: [hackathonId], references: [id])
}

model Lead {
  id          String  @id @default(uuid())
  hackathonId String
  name        String
  email       String
  phone       String?
  company     String?
  jobTitle    String?

  type LeadType

  hackathon Hackathon @relation(fields: [hackathonId], references: [id])
}

enum LeadType {
  Venue
  Sponsor
  Other
}

model BrandingItem {
  id String @id @default(uuid())
  hackathonId String

  fileName String
  url String

  type BrandingItemType

  hackathon Hackathon @relation(fields: [hackathonId], references: [id])
}

enum BrandingItemType {
  Logo
  Banner
  StickerDesign
  TShirtDesign
}

model SignupForm {
  id          String            @id @default(uuid())
  fields      SignupFormField[]
  hackathonId String            @unique
  hackathon   Hackathon         @relation(fields: [hackathonId], references: [id])
}

model SignupFormField {
  id          String            @id @default(uuid())
  attributeId String            @unique
  attribute   AttendeeAttribute @relation(fields: [attributeId], references: [id])

  required    Boolean
  label       String
  description String?
  plaecholder String?
  order       Int

  signupFormId String?
  signupForm   SignupForm? @relation(fields: [signupFormId], references: [id])
}

model Track {
  id         String   @id @default(uuid())
  events     Event[]
  scheduleId String   @unique
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
}

model Event {
  id        String   @id @default(uuid())
  name      String
  location  String
  startDate DateTime
  endDate   DateTime
  trackId   String
  track     Track    @relation(fields: [trackId], references: [id])
}

model AttendeeAttribute {
  id      String   @id @default(uuid())
  name    String
  type    String
  options String[]

  order Int

  signupFormField SignupFormField?

  hackathonId String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])

  values AttendeeAttributeValue[]
}

model AttendeeAttributeValue {
  id          String            @id @default(uuid())
  value       String
  attendeeId  String
  attendee    Attendee          @relation(fields: [attendeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formFieldId String
  formField   AttendeeAttribute @relation(fields: [formFieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Attendee {
  id   String @id @default(uuid())
  name String

  attributeValues AttendeeAttributeValue[]
  email           String
  phone           String?
  parent Parent?
  dateOfBirth DateTime?


  checkedIn  Boolean @default(false)
  checkInKey String? @unique

  hackathonId String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])
  tokens      Token[]
  broadcasts SentBroadcast[]

  createdAt DateTime @default(now())
}

model Parent {
  id String @id @default(uuid())
  name String
  email String
  phone String?
  attendeeId String @unique
  attendee Attendee @relation(fields: [attendeeId], references: [id])
}

model Project {
  id              String                  @id @default(uuid())
  name            String
  hackathonId     String
  hackathon       Hackathon               @relation(fields: [hackathonId], references: [id])
  attributeValues ProjectAttributeValue[]
  collaborators   Attendee[]
}

model ProjectAttribute {
  id      String   @id @default(uuid())
  name    String
  type    String
  options String[]

  order Int

  hackathonId String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])

  values                 ProjectAttributeValue[]
  projectSubmissionField ProjectSubmissionField?
}

model ProjectAttributeValue {
  id          String           @id @default(uuid())
  value       String
  projectId   String
  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attributeId String
  attribute   ProjectAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ProjectSubmissionField {
  id          String           @id @default(uuid())
  attributeId String           @unique
  attribute   ProjectAttribute @relation(fields: [attributeId], references: [id])

  required    Boolean
  label       String
  description String?
  placeholder String?
  order       Int

  hackathonId String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}

model Token {
  token      String   @unique @default(cuid())
  magicKey   String?  @unique @default(cuid())
  createdAt  DateTime @default(now())
  attendeeId String
  attendee   Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Device {
  id          String     @id @default(uuid())
  name        String
  authKey     String     @unique @default(cuid())
  createdAt   DateTime   @default(now())
  hackathonId String?
  hackathon   Hackathon? @relation(fields: [hackathonId], references: [id])
}

model SentBroadcast {
  id String @id @default(uuid())
  messageId String
  message Broadcast @relation(fields: [messageId], references: [id])
  attendeeId String
  attendee Attendee @relation(fields: [attendeeId], references: [id])
}

model Broadcast {
  id String @id @default(uuid())
  emailHTMLTemplate String
  emailPlaintextTemplate String
  smsTemplate String
  sent SentBroadcast[]
  hackathonId String
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
}